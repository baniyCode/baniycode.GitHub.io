<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Baniy Cai</title>
    <link>https://baniycai.github.io/categories/go/</link>
    <description>Recent content in Go on Baniy Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 27 Dec 2023 16:06:33 +0800</lastBuildDate><atom:link href="https://baniycai.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>你的 Go 应用有使用正确的 CPU 核数吗？</title>
      <link>https://baniycai.github.io/article/go_cpu_num_setting/</link>
      <pubDate>Wed, 27 Dec 2023 16:06:33 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/go_cpu_num_setting/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/baniycai/picture-bed/main/2023/12/c_20231227_1703660603.png&#34; alt=&#34;image-20231227150323340&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在现代云原生语言领域，Go 因其并发支持和通过 goroutine 实现的效率而广受欢迎。然而，在如何使用合适数量的 CPU 核心这个问题上，Go 应用程序面临一些挑战。本文我们探讨了根本问题，并说明了为什么 Go 应用程序可能无法使用正确数量的 CPU 核心，特别是在 Kubernetes 等容器化环境中。
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>项目中关于Go字符串拼接的一些思考</title>
      <link>https://baniycai.github.io/article/go_string_splice/</link>
      <pubDate>Mon, 20 Nov 2023 17:17:19 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/go_string_splice/</guid>
      <description>实际场景 ​	今天在review我们两个核心项目代码的时候，发现项目中大量调用了fmt.Sprintf方法，即使是简单的两个字符串的拼接(没有任何分隔符)也使用了这个方法，对于一个接近疯狂的代码性能追求党，怎么能容忍这种代码的存在呢！！！
ps：两个项目，一个是实时项目，业务相对比较简单，接收外部请求，进行各种过滤后返回广告素材相关信息，请求响应时间不能超过1s，该项目暂称为F(fast)；一个是收数的项目，业务相对比较复杂，同样是接收外部请求，但是返回一个响应码就行，而且对响应时间没有太大的要求，基本是有响应就行，该项目暂称为S(slow)
​	转头一想，性能优化也是要做权衡考虑的，不是说性能最高的代码就是最好的代码，还要结合实际场景来考虑！我们知道，fmt.Sprintf()方法主要是用来做字符串的拼接，比如说redisKey := fmt.Sprintf(&amp;quot;%d_%d_%d&amp;quot;, planId, itemId, unit)，这样的代码比起简单地使用+操作符来实现，可读性高了很多。但是，往往没有十全十美的方案，可读性的提升带来的是性能的降低。废话不多说，上基准测试！！！
package main import ( &amp;#34;testing&amp;#34; &amp;#34;fmt&amp;#34; ) // 使用 + 操作符拼接字符串 func concatWithPlusOperator(a, b string) string { return a + b } // 使用 fmt.Printf 拼接字符串 func concatWithPrintf(a, b string) string { return fmt.Sprintf(&amp;#34;%s%s&amp;#34;, a, b) } // 基准测试函数 func BenchmarkStringConcatenation(b *testing.B) { a := &amp;#34;Hello&amp;#34; benchmarkCases := []struct { name string concat func(string, string) string }{ {&amp;#34;PlusOperator&amp;#34;, concatWithPlusOperator}, {&amp;#34;Printf&amp;#34;, concatWithPrintf}, } for _, bm := range benchmarkCases { b.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</link>
      <pubDate>Mon, 15 May 2023 21:15:17 +0800</pubDate>
      
      <guid>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</guid>
      <description>为何Java和Go等高级语言没有直接访问OS底层硬件的能力?
在Java和Go等高级语言的开发中，都是通过外部库或操作系统API来访问底层硬件资源。例如，Java提供了Java Native Interface（JNI）机制，可以通过JNI调用C/C++代码，从而实现与底层硬件的交互。类似地，Go也提供了类似于JNI的机制，称为cgo。使用cgo，可以将Go程序与C/C++代码结合起来，实现对底层硬件的访问。
事实上，Java和Go等高级语言为了提供更好的跨平台性和安全性，实现了一定程度的抽象和封装。一方面，Java和Go都运行在虚拟机上，而不是直接运行在硬件上，这使得它们无法像C/C++那样直接操作硬件。另一方面，Java和Go等高级语言的内存管理机制也与C/C++有所不同。例如，在Java中，垃圾回收器会自动管理内存，因此程序员不能直接控制和操作指针。这种内存管理机制虽然提高了程序的安全性和稳定性，但也限制了程序对底层硬件的直接访问。
与此相反，C/C++语言更接近底层硬件，提供了对指针、内存地址以及底层操作的直接支持。这使得C/C++程序员可以更方便地实现对底层硬件的访问和操作。
总之，Java和Go等高级语言的设计目标是为了提高开发效率和程序的安全性，因此在一定程度上牺牲了直接访问底层硬件的能力。而C/C++则更加注重效率和控制，因此具备更好的直接访问底层硬件的能力。</description>
    </item>
    
  </channel>
</rss>
