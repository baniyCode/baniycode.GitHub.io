<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Statuses on Baniy Cai</title>
    <link>https://baniycai.github.io/status/</link>
    <description>Recent content in Statuses on Baniy Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 11 Jun 2023 11:47:10 +0800</lastBuildDate><atom:link href="https://baniycai.github.io/status/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/unicode_utf8_ascii/</link>
      <pubDate>Sun, 11 Jun 2023 11:47:10 +0800</pubDate>
      
      <guid>https://baniycai.github.io/status/unicode_utf8_ascii/</guid>
      <description>Unicode、UTF-8和ASCII的区别是什么？
Unicode是一种字符集，它定义了每个字符的唯一编号，也就是所谓的“码点”。Unicode码点是一个以“U+”开头的十六进制数字，例如，英文字母“A”的Unicode码点为U+0041，中文汉字“好”的Unicode码点为U+597D。
UTF-8是一种基于Unicode字符集实现的可变长度的字符编码方式。在UTF-8中，一个字符可以由1到4个字节组成，具体使用多少个字节取决于字符的码点大小。
ASCII字符集是一种使用7位（即128个代码）来表示字符的编码方式，它定义了从0到127共128个字符的编码，包括26个英文字母、数字、标点符号和一些控制字符等。Unicode字符集包含了ASCII字符集中所有的字符，并且将它们的编码与ASCII字符集完全一致。也就是说，ASCII字符集中的每个字符在Unicode字符集中都有相同的码点和编码方式。Unicode字符集也被称为ASCII的超集。
总的来说，Unicode是一个字符集，而UTF-8是一个编码方式，Unicode定义了如何表示字符的抽象概念，而UTF-8则定义了如何将字符编码为计算机能够处理的数据。Unicode这个字符集又包含ASCII字符集</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</link>
      <pubDate>Mon, 15 May 2023 21:15:17 +0800</pubDate>
      
      <guid>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</guid>
      <description>为何Java和Go等高级语言没有直接访问OS底层硬件的能力?
在Java和Go等高级语言的开发中，都是通过外部库或操作系统API来访问底层硬件资源。例如，Java提供了Java Native Interface（JNI）机制，可以通过JNI调用C/C++代码，从而实现与底层硬件的交互。类似地，Go也提供了类似于JNI的机制，称为cgo。使用cgo，可以将Go程序与C/C++代码结合起来，实现对底层硬件的访问。
事实上，Java和Go等高级语言为了提供更好的跨平台性和安全性，实现了一定程度的抽象和封装。一方面，Java和Go都运行在虚拟机上，而不是直接运行在硬件上，这使得它们无法像C/C++那样直接操作硬件。另一方面，Java和Go等高级语言的内存管理机制也与C/C++有所不同。例如，在Java中，垃圾回收器会自动管理内存，因此程序员不能直接控制和操作指针。这种内存管理机制虽然提高了程序的安全性和稳定性，但也限制了程序对底层硬件的直接访问。
与此相反，C/C++语言更接近底层硬件，提供了对指针、内存地址以及底层操作的直接支持。这使得C/C++程序员可以更方便地实现对底层硬件的访问和操作。
总之，Java和Go等高级语言的设计目标是为了提高开发效率和程序的安全性，因此在一定程度上牺牲了直接访问底层硬件的能力。而C/C++则更加注重效率和控制，因此具备更好的直接访问底层硬件的能力。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/bilberry-theme-released/</link>
      <pubDate>Wed, 15 Dec 2021 10:45:44 +0200</pubDate>
      
      <guid>https://baniycai.github.io/status/bilberry-theme-released/</guid>
      <description>I&amp;rsquo;m glad to announce the release of the Bilberry Hugo theme. This premium theme is published under an open-source license (MIT), and you can use it free of charge. It took me a significant amount of time to create and refine this theme. This theme is a collaborative effort of numerous volunteers.</description>
    </item>
    
  </channel>
</rss>
