<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Baniy Cai</title>
    <link>https://baniycai.github.io/article/</link>
    <description>Recent content in Articles on Baniy Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 03 Nov 2023 23:19:44 +0800</lastBuildDate><atom:link href="https://baniycai.github.io/article/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS S3 &#43; CloudFront</title>
      <link>https://baniycai.github.io/article/aws_cloudfront/</link>
      <pubDate>Fri, 03 Nov 2023 23:19:44 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/aws_cloudfront/</guid>
      <description>&lt;h3 id=&#34;快速大规模地存储和分发内容&#34;&gt;快速、大规模地存储和分发内容&lt;/h3&gt;
&lt;p&gt;​	如果你有一个网站、应用程序或其他web资源，那么你可能会有静态资源。静态资源包括图像、视频或音乐等文件，还包括像 .css 或 js 等脚本文件。在云服务还未流行的时代，你可以将这些文件放在服务器上，然后通过互联网将它们提供给全球某个特定地理位置的所有受众。但有了云服务，就有一种解决方案可以提供更快的交付和更好的可扩展性。在这篇博客中，你将了解如何使用 Amazon Simple Storage Service (S3) 和 Amazon CloudFront 大规模存储、保护和交付你的静态资源。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gin_source_code_summary</title>
      <link>https://baniycai.github.io/article/gin_source_code_summary/</link>
      <pubDate>Sat, 03 Jun 2023 21:59:54 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/gin_source_code_summary/</guid>
      <description>前言 ​	小弟一直以来都对各种技术或框架的底层原理很感兴趣，自认为只有把这项技术的底层原理都摸透了，才能很好地驾驭这门技术，减少踩坑和犯错的可能。
​	最近刚好想学习golang的各个web框架，了解下它们的底层以及它们之间有什么区别，所以就开始了源码之旅~~~
​	这周的下班时间加上周末的一点点时间，大概地看了下golang源码的http包和gin web框架的大部分代码。golang源码的http包内容相对简单，且路由功能相对单一，只支持绝对匹配路由(会一点小调整啦，后面再细讲)，但对于大部分简单的场景是完全足够的啦，这里就不讲了，后面找时间再来详细说下，今天重点讲下gin框架的源码~~~
源码解读 ​	关于gin的介绍就不说啦，网上一大堆介绍，且这篇文章的重点是讲源码，所以就直接开始源码之旅叭 (小声bb：这只是小弟的个人总结和理解，不一定对，理性看哈，而且随着知识学习的深入，后面可能还会对内容进行改进哈)
​	感觉gin最关键的两个结构应该是Engine和Context了。Engine实现了http.Handler接口，在ServeHTTP(ResponseWriter, *Request)中接收到请求后，从Engine的methodTrees方法树中找出能处理该请求path的handlers，之后将req和res包装成Context传给该handlers进行处理，下面是gin中的hander的方法签名
type HandlerFunc func(*Context) todo 未完待续</description>
    </item>
    
    <item>
      <title>MakeFile intro</title>
      <link>https://baniycai.github.io/article/makefile_intro/</link>
      <pubDate>Sun, 14 May 2023 21:15:40 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/makefile_intro/</guid>
      <description>&lt;h3 id=&#34;makefile-规则&#34;&gt;Makefile 规则&lt;/h3&gt;
&lt;p&gt;在程序编译过程中，&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;的主要作用就是：构建生成可执行文件的依赖关系树。&lt;strong&gt;一个可执行文件需要哪些源文件、哪些库，我们都可以在&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;里指定&lt;/strong&gt;。在程序编译阶段，make工具会首先解析这个&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;，根据&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;里的指定，构建出编译可执行文件所需要的完整依赖关系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Support and Discussions</title>
      <link>https://baniycai.github.io/article/support-and-discussions/</link>
      <pubDate>Mon, 01 Nov 2021 18:10:14 +0100</pubDate>
      
      <guid>https://baniycai.github.io/article/support-and-discussions/</guid>
      <description>Support for this theme is provided through the Issues and Discussions sections of the project. Please use the Issues section if you would like to report a defect or bug. For any other requests, use the Discussions section.
Please use the following guidelines if you want to start a discussion:
For any questions regarding a specific feature, or if you need help using or customizing the theme, use the Questions &amp;amp; Answers (Q&amp;amp;A) category.</description>
    </item>
    
  </channel>
</rss>
