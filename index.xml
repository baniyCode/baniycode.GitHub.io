<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Baniy Cai</title>
    <link>https://baniycai.github.io/</link>
    <description>Recent content on Baniy Cai</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 03 Nov 2023 23:19:44 +0800</lastBuildDate>
    
        <atom:link href="https://baniycai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS S3 &#43; CloudFront</title>
      <link>https://baniycai.github.io/article/aws_cloudfront/</link>
      <pubDate>Fri, 03 Nov 2023 23:19:44 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/aws_cloudfront/</guid>
      <description>快速、大规模地存储和分发内容 ​	如果你有一个网站、应用程序或其他web资源，那么你可能会有静态资源。静态资源包括图像、视频或音乐等文件，还包括像 .css 或 js 等脚本文件。在云服务还未流行的时代，你可以将这些文件放在服务器上，然后通过互联网将它们提供给全球某个特定地理位置的所有受众。但有了云服务，就有一种解决方案可以提供更快的交付和更好的可扩展性。在这篇博客中，你将了解如何使用 Amazon Simple Storage Service (S3) 和 Amazon CloudFront 大规模存储、保护和交付你的静态资源。
​	第一步是以安全且可扩展的方式存储你的资源。对于你想要在互联网上提供的静态资源，一种简单而灵活的方法是将其存储在 Amazon S3“存储桶”中。 S3 易于设置和使用，旨在从互联网上的任何位置存储和检索任意数量的文件或对象。它使用简单，并以低成本提供持久、高度可用且可扩展的数据存储。
​	当你将资源放入云中的 S3 存储桶时，很多事情都会变得更加容易。首先，你无需规划和分配特定数量的存储空间，因为 S3 存储桶会自动扩展。此外，由于S3是serverless(无服务器)服务，因此你无需自己管理存储文件的服务器；你只需放置并获取你的内容。最后，即使你的应用程序需要服务器（例如，因为你有动态应用程序），服务器也可以更加简单，因为它不必处理静态内容的请求。
​	使用 S3 存储静态资源有很多优点。但为了帮助优化应用程序的性能和安全性，同时有效管理成本，Aws官方建议同时设置 Amazon CloudFront 以与 S3 存储桶配合使用，以提供和保护内容。 CloudFront 是一项内容交付网络 (content delivery network,CDN) 服务，可在全球范围内安全、大规模地交付静态和动态 Web 内容、视频流和 APIs。按照设计，从 CloudFront 交付数据比从 S3 直接向用户交付数据更节省成本。
​	CloudFront 通过称为边缘位置(Edge Locations)的全球数据中心网络提供内容。使用边缘服务器缓存和提供内容，通过提供更靠近查看者所在位置的内容来提高性能。 CloudFront 在世界各地都有边缘服务器，如下图所示：
​	当用户请求你通过 CloudFront 提供的内容时，他们的请求将被路由到附近的边缘站点。如果 CloudFront 具有所请求文件的缓存副本，CloudFront 会将其传送给用户，从而提供快速响应。如果他们请求的文件尚未缓存，CloudFront 会从你的文件来源检索该文件 - 例如，你存储内容的 S3 存储桶。然后，对于相同内容的下一个本地请求，它已经在附近缓存并且可以立即提供服务。
​	通过在边缘位置缓存你的内容，CloudFront 可以减少 S3 存储桶上的负载，并有助于确保用户在请求内容时获得更快的响应。此外，使用 CloudFront 传出内容数据通常比直接从 S3 提供文件更具成本效益，而且从 S3 到 CloudFront 无需支付数据传输费用。你只需支付从 CloudFront 传送到互联网的内容，以及请求费用。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/unicode_utf8_ascii/</link>
      <pubDate>Sun, 11 Jun 2023 11:47:10 +0800</pubDate>
      
      <guid>https://baniycai.github.io/status/unicode_utf8_ascii/</guid>
      <description>Unicode、UTF-8和ASCII的区别是什么？
Unicode是一种字符集，它定义了每个字符的唯一编号，也就是所谓的“码点”。Unicode码点是一个以“U+”开头的十六进制数字，例如，英文字母“A”的Unicode码点为U+0041，中文汉字“好”的Unicode码点为U+597D。
UTF-8是一种基于Unicode字符集实现的可变长度的字符编码方式。在UTF-8中，一个字符可以由1到4个字节组成，具体使用多少个字节取决于字符的码点大小。
ASCII字符集是一种使用7位（即128个代码）来表示字符的编码方式，它定义了从0到127共128个字符的编码，包括26个英文字母、数字、标点符号和一些控制字符等。Unicode字符集包含了ASCII字符集中所有的字符，并且将它们的编码与ASCII字符集完全一致。也就是说，ASCII字符集中的每个字符在Unicode字符集中都有相同的码点和编码方式。Unicode字符集也被称为ASCII的超集。
总的来说，Unicode是一个字符集，而UTF-8是一个编码方式，Unicode定义了如何表示字符的抽象概念，而UTF-8则定义了如何将字符编码为计算机能够处理的数据。Unicode这个字符集又包含ASCII字符集</description>
    </item>
    
    <item>
      <title>Gin_source_code_summary</title>
      <link>https://baniycai.github.io/article/gin_source_code_summary/</link>
      <pubDate>Sat, 03 Jun 2023 21:59:54 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/gin_source_code_summary/</guid>
      <description>前言 ​	小弟一直以来都对各种技术或框架的底层原理很感兴趣，自认为只有把这项技术的底层原理都摸透了，才能很好地驾驭这门技术，减少踩坑和犯错的可能。
​	最近刚好想学习golang的各个web框架，了解下它们的底层以及它们之间有什么区别，所以就开始了源码之旅~~~
​	这周的下班时间加上周末的一点点时间，大概地看了下golang源码的http包和gin web框架的大部分代码。golang源码的http包内容相对简单，且路由功能相对单一，只支持绝对匹配路由(会一点小调整啦，后面再细讲)，但对于大部分简单的场景是完全足够的啦，这里就不讲了，后面找时间再来详细说下，今天重点讲下gin框架的源码~~~
源码解读 ​	关于gin的介绍就不说啦，网上一大堆介绍，且这篇文章的重点是讲源码，所以就直接开始源码之旅叭 (小声bb：这只是小弟的个人总结和理解，不一定对，理性看哈，而且随着知识学习的深入，后面可能还会对内容进行改进哈)
​	感觉gin最关键的两个结构应该是Engine和Context了。Engine实现了http.Handler接口，在ServeHTTP(ResponseWriter, *Request)中接收到请求后，从Engine的methodTrees方法树中找出能处理该请求path的handlers，之后将req和res包装成Context传给该handlers进行处理，下面是gin中的hander的方法签名
type HandlerFunc func(*Context) todo 未完待续</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</link>
      <pubDate>Mon, 15 May 2023 21:15:17 +0800</pubDate>
      
      <guid>https://baniycai.github.io/status/c/c&#43;&#43;_vs_other_programming_language/</guid>
      <description>为何Java和Go等高级语言没有直接访问OS底层硬件的能力?
在Java和Go等高级语言的开发中，都是通过外部库或操作系统API来访问底层硬件资源。例如，Java提供了Java Native Interface（JNI）机制，可以通过JNI调用C/C++代码，从而实现与底层硬件的交互。类似地，Go也提供了类似于JNI的机制，称为cgo。使用cgo，可以将Go程序与C/C++代码结合起来，实现对底层硬件的访问。
事实上，Java和Go等高级语言为了提供更好的跨平台性和安全性，实现了一定程度的抽象和封装。一方面，Java和Go都运行在虚拟机上，而不是直接运行在硬件上，这使得它们无法像C/C++那样直接操作硬件。另一方面，Java和Go等高级语言的内存管理机制也与C/C++有所不同。例如，在Java中，垃圾回收器会自动管理内存，因此程序员不能直接控制和操作指针。这种内存管理机制虽然提高了程序的安全性和稳定性，但也限制了程序对底层硬件的直接访问。
与此相反，C/C++语言更接近底层硬件，提供了对指针、内存地址以及底层操作的直接支持。这使得C/C++程序员可以更方便地实现对底层硬件的访问和操作。
总之，Java和Go等高级语言的设计目标是为了提高开发效率和程序的安全性，因此在一定程度上牺牲了直接访问底层硬件的能力。而C/C++则更加注重效率和控制，因此具备更好的直接访问底层硬件的能力。</description>
    </item>
    
    <item>
      <title>MakeFile intro</title>
      <link>https://baniycai.github.io/article/makefile_intro/</link>
      <pubDate>Sun, 14 May 2023 21:15:40 +0800</pubDate>
      
      <guid>https://baniycai.github.io/article/makefile_intro/</guid>
      <description>&lt;h3 id=&#34;makefile-规则&#34;&gt;Makefile 规则&lt;/h3&gt;
&lt;p&gt;在程序编译过程中，&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;的主要作用就是：构建生成可执行文件的依赖关系树。&lt;strong&gt;一个可执行文件需要哪些源文件、哪些库，我们都可以在&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;里指定&lt;/strong&gt;。在程序编译阶段，make工具会首先解析这个&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;，根据&lt;a href=&#34;https://www.zhaixue.cc/makefile/makefile-intro.html&#34;&gt;Makefile&lt;/a&gt;里的指定，构建出编译可执行文件所需要的完整依赖关系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://baniycai.github.io/status/bilberry-theme-released/</link>
      <pubDate>Wed, 15 Dec 2021 10:45:44 +0200</pubDate>
      
      <guid>https://baniycai.github.io/status/bilberry-theme-released/</guid>
      <description>I&amp;rsquo;m glad to announce the release of the Bilberry Hugo theme. This premium theme is published under an open-source license (MIT), and you can use it free of charge. It took me a significant amount of time to create and refine this theme. This theme is a collaborative effort of numerous volunteers.</description>
    </item>
    
    <item>
      <title>Support and Discussions</title>
      <link>https://baniycai.github.io/article/support-and-discussions/</link>
      <pubDate>Mon, 01 Nov 2021 18:10:14 +0100</pubDate>
      
      <guid>https://baniycai.github.io/article/support-and-discussions/</guid>
      <description>Support for this theme is provided through the Issues and Discussions sections of the project. Please use the Issues section if you would like to report a defect or bug. For any other requests, use the Discussions section.
Please use the following guidelines if you want to start a discussion:
For any questions regarding a specific feature, or if you need help using or customizing the theme, use the Questions &amp;amp; Answers (Q&amp;amp;A) category.</description>
    </item>
    
    <item>
      <title>My Trip to Scotland</title>
      <link>https://baniycai.github.io/gallery/my-trip-to-scotland/</link>
      <pubDate>Mon, 01 Nov 2021 18:01:26 +0100</pubDate>
      
      <guid>https://baniycai.github.io/gallery/my-trip-to-scotland/</guid>
      <description>In June 2017 I&amp;rsquo;ve visited Scotland with my best friend for two weeks. We drove a lot through the beautiful countryside and saw a lot of different animals: cattle, deer, birds, dolphins, and sheep. Sheep everywhere!
At one beautiful camping site, we saw cattle in fog in the very early morning and took a picture of it. The image now has the title &amp;ldquo;Rindviecher im Nebel&amp;rdquo;, a quite funny German phrase that means cattle in the fog.</description>
    </item>
    
    <item>
      <title>Kilez More - New World Order</title>
      <link>https://baniycai.github.io/audio/kilez-more-new-world-order/</link>
      <pubDate>Mon, 01 Nov 2021 16:12:47 +0100</pubDate>
      
      <guid>https://baniycai.github.io/audio/kilez-more-new-world-order/</guid>
      <description>With the audio post type you can easily integrate a Spotify, SoundCloud, TuneIn or Mixcloud player to your post.
If you don&amp;rsquo;t want to embed sound but use a header image you can set it with the featuredImage option in your markdown file.</description>
    </item>
    
    <item>
      <title>Duckduckgo.com</title>
      <link>https://baniycai.github.io/link/duckduckgo/</link>
      <pubDate>Mon, 01 Nov 2021 13:05:27 +0100</pubDate>
      
      <guid>https://baniycai.github.io/link/duckduckgo/</guid>
      <description>A search engine that respects your privacy.</description>
    </item>
    
    <item>
      <title>Edward Snowden About Privacy</title>
      <link>https://baniycai.github.io/quote/edward-snowden-privacy/</link>
      <pubDate>Mon, 01 Nov 2021 13:01:14 +0100</pubDate>
      
      <guid>https://baniycai.github.io/quote/edward-snowden-privacy/</guid>
      <description>Arguing that you don&amp;rsquo;t care about the right to privacy because you have nothing to hide is no different than saying you don&amp;rsquo;t care about free speech because you have nothing to say.</description>
    </item>
    
    <item>
      <title>Installing Bilberry Theme</title>
      <link>https://baniycai.github.io/code/installing-bilberry-theme/</link>
      <pubDate>Mon, 01 Nov 2021 09:31:27 +0100</pubDate>
      
      <guid>https://baniycai.github.io/code/installing-bilberry-theme/</guid>
      <description>&lt;p&gt;You will find all information to setup this theme with your hugo site
on the official &lt;!-- raw HTML omitted --&gt; &lt;a href=&#34;https://github.com/Lednerb/bilberry-hugo-theme&#34;&gt;Github Repository&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
